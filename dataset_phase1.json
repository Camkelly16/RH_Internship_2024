[
  {
    "Question": "What PromQL expression calculates the rate of HTTP requests over the last 1 minute?",
    "Option A": "rate(http_requests_total[1m])",
    "Option B": "increase(http_requests_total[1m])",
    "Option C": "sum(http_requests_total[1m])",
    "Option D": "avg(http_requests_total[1m])",
    "Correct Answer": 1
  },
  {
    "Question": "How do you filter metrics by the label 'job' with the value 'api-server'?",
    "Option A": "http_requests_total{job=\"api-server\"}",
    "Option B": "http_requests_total[job=\"api-server\"]",
    "Option C": "http_requests_total(job=\"api-server\")",
    "Option D": "http_requests_total@job=\"api-server",
    "Correct Answer": 1
  },
  {
    "Question": "What function would you use to calculate the maximum value over a range vector?",
    "Option A": "max_over_time",
    "Option B": "avg_over_time",
    "Option C": "sum_over_time",
    "Option D": "min_over_time",
    "Correct Answer": 1
  },
  {
    "Question": "What is the correct way to apply a simple rate function in PromQL?",
    "Option A": "rate(metric_name)",
    "Option B": "rate(metric_name[5m])",
    "Option C": "rate(metric_name) by (instance)",
    "Option D": "rate[5m](metric_name)",
    "Correct Answer": 2
  },
  {
    "Question": "Which PromQL expression filters metrics to those where the label 'status' is not equal to '200'?",
    "Option A": "http_requests_total{status!=\"200\"}",
    "Option B": "http_requests_total{status<>200}",
    "Option C": "http_requests_total(status!=\"200\")",
    "Option D": "http_requests_total{status!200}",
    "Correct Answer": 1
  },
  {
    "Question": "How do you select the last value of a time series in PromQL?",
    "Option A": "last_over_time(metric_name[5m])",
    "Option B": "max(metric_name)",
    "Option C": "metric_name",
    "Option D": "metric_name[5m]",
    "Correct Answer": 3
  },
  {
    "Question": "How do you calculate the average CPU usage per instance over the last 5 minutes?",
    "Option A": "avg(rate(node_cpu_seconds_total[5m])) by (instance)",
    "Option B": "sum(rate(node_cpu_seconds_total[5m])) by (instance)",
    "Option C": "max(rate(node_cpu_seconds_total[5m])) by (instance)",
    "Option D": "min(rate(node_cpu_seconds_total[5m])) by (instance)",
    "Correct Answer": 1
  },
  {
    "Question": "Which PromQL expression calculates the increase in HTTP requests over the last 1 hour?",
    "Option A": "increase(http_requests_total[1h])",
    "Option B": "rate(http_requests_total[1h])",
    "Option C": "sum(http_requests_total[1h])",
    "Option D": "delta(http_requests_total[1h])",
    "Correct Answer": 1
  },
  {
    "Question": "How do you combine two metrics using the sum operator?",
    "Option A": "metric1 + metric2",
    "Option B": "sum(metric1, metric2)",
    "Option C": "combine(metric1, metric2)",
    "Option D": "add(metric1, metric2)",
    "Correct Answer": 1
  },
  {
    "Question": "Which function would you use to get the 95th percentile of response times?",
    "Option A": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
    "Option B": "quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
    "Option C": "percentile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
    "Option D": "topk(0.95, rate(http_request_duration_seconds_bucket[5m]))",
    "Correct Answer": 1
  },
  {
    "Question": "What is the correct way to calculate the sum of values grouped by 'job' and 'instance'?",
    "Option A": "sum(metric_name) by (job, instance)",
    "Option B": "sum(metric_name) by job, instance",
    "Option C": "sum(metric_name) job instance",
    "Option D": "sum(metric_name) over (job, instance)",
    "Correct Answer": 1
  },
  {
    "Question": "Which expression calculates the difference between the maximum and minimum values of a metric over the last 10 minutes?",
    "Option A": "max_over_time(metric_name[10m]) - min_over_time(metric_name[10m])",
    "Option B": "delta(metric_name[10m])",
    "Option C": "range(metric_name[10m])",
    "Option D": "increase(metric_name[10m])",
    "Correct Answer": 1
  },
  {
    "Question": "How do you filter metrics where the 'environment' label is either 'prod' or 'staging'?",
    "Option A": "metric_name{environment=~\"prod|staging\"}",
    "Option B": "metric_name{environment=\"prod|staging\"}",
    "Option C": "metric_name{environment!~\"prod|staging\"}",
    "Option D": "metric_name{environment==\"prod|staging\"}",
    "Correct Answer": 1
  },
  {
    "Question": "What function do you use to calculate the number of time series in a metric?",
    "Option A": "count(metric_name)",
    "Option B": "sum(metric_name)",
    "Option C": "avg(metric_name)",
    "Option D": "rate(metric_name)",
    "Correct Answer": 1
  },
  {
    "Question": "Which nested query calculates the average CPU usage for instances with more than 2 cores?",
    "Option A": "avg by (instance) (sum by (instance, cpu) (rate(node_cpu_seconds_total[5m]))) > 2",
    "Option B": "avg by (instance) (rate(node_cpu_seconds_total[5m])) > 2",
    "Option C": "sum by (instance) (avg by (cpu) (rate(node_cpu_seconds_total[5m]))) > 2",
    "Option D": "sum by (instance) (rate(node_cpu_seconds_total[5m])) / count by (instance) (node_cpu_seconds_total) > 2",
    "Correct Answer": 1
  },
  {
    "Question": "How do you calculate the ratio of failed HTTP requests to total HTTP requests over the last 5 minutes?",
    "Option A": "sum(rate(http_requests_total{status=~\"5..\"}[5m])) / sum(rate(http_requests_total[5m]))",
    "Option B": "sum(rate(http_requests_total{status=~\"5..\"}[5m])) and sum(rate(http_requests_total[5m]))",
    "Option C": "rate(http_requests_total{status=~\"5..\"}[5m]) / rate(http_requests_total[5m])",
    "Option D": "avg(rate(http_requests_total{status=~\"5..\"}[5m])) / avg(rate(http_requests_total[5m]))",
    "Correct Answer": 1
  },
  {
    "Question": "Which query optimizes the calculation of the 99th percentile of request durations in a high-cardinality environment?",
    "Option A": "histogram_quantile(0.99, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))",
    "Option B": "histogram_quantile(0.99, avg(rate(http_request_duration_seconds_bucket[5m])) by (le))",
    "Option C": "histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m]))",
    "Option D": "histogram_quantile(0.99, max(rate(http_request_duration_seconds_bucket[5m])) by (le))",
    "Correct Answer": 1
  },
  {
    "Question": "How do you efficiently compute the average memory usage per namespace, excluding the 'kube-system' namespace?",
    "Option A": "avg_over_time(node_memory_MemTotal_bytes{namespace!=\"kube-system\"}[5m]) by (namespace)",
    "Option B": "avg_over_time(node_memory_MemTotal_bytes[5m]) by (namespace) != \"kube-system",
    "Option C": "avg(rate(node_memory_MemTotal_bytes{namespace!=\"kube-system\"}[5m])) by (namespace)",
    "Option D": "avg(node_memory_MemTotal_bytes{namespace!=\"kube-system\"}) by (namespace)",
    "Correct Answer": 1
  },
  {
    "Question": "Which PromQL function calculates the average value of a time series over a specified time range?",
    "Option A": "avg_over_time()",
    "Option B": "sum()",
    "Option C": "max()",
    "Option D": "count()",
    "Correct Answer": 3
  },
  {
    "Question": "Which function would you use to sum the values of a time series across all instances?",
    "Option A": "avg()",
    "Option B": "sum()",
    "Option C": "max()",
    "Option D": "count()",
    "Correct Answer": 2
  },
  {
    "Question": "Which PromQL function provides the instantaneous rate of increase of a counter metric?",
    "Option A": "avg_over_time()",
    "Option B": "increase()",
    "Option C": "rate()",
    "Option D": "irate()",
    "Correct Answer": 4
  },
  {
    "Question": "Which function would you use to determine the maximum value within a time series over a specified time range?",
    "Option A": "min_over_time()",
    "Option B": "max_over_time()",
    "Option C": "sum_over_time()",
    "Option D": "avg_over_time()",
    "Correct Answer": 2
  },
  {
    "Question": "Which function is used to calculate the 90th percentile of a time series?",
    "Option A": "quantile_over_time(0.90)",
    "Option B": "percentile_over_time(0.90)",
    "Option C": "quantile(0.90)",
    "Option D": "percent(0.90)",
    "Correct Answer": 1
  },
  {
    "Question": "How would you write a PromQL query to calculate the average memory usage across all pods in a Kubernetes cluster?",
    "Option A": "avg(kube_pod_memory_usage_bytes)",
    "Option B": "sum(kube_pod_memory_usage_bytes)",
    "Option C": "avg_over_time(kube_pod_memory_usage_bytes[5m])",
    "Option D": "rate(kube_pod_memory_usage_bytes[5m])",
    "Correct Answer": 1
  },
  {
    "Question": "To calculate the rate of increase of HTTP requests in the last 5 minutes for a web application, which query would you use?",
    "Option A": "rate(http_requests_total[5m])",
    "Option B": "sum(http_requests_total[5m])",
    "Option C": "increase(http_requests_total[5m])",
    "Option D": "irate(http_requests_total[5m])",
    "Correct Answer": 1
  },
  {
    "Question": "What does the histogram_quantile() function do in PromQL?",
    "Option A": "Computes the quantile (e.g., 95th percentile) from a histogram",
    "Option B": "Calculates the average of a histogram",
    "Option C": "Computes the sum of all histogram values",
    "Option D": "Returns the rate of change for histogram values",
    "Correct Answer": 1
  },
  {
    "Question": "Which function combination would you use to calculate the average CPU usage over the past 10 minutes?",
    "Option A": "avg_over_time(cpu_usage[10m])",
    "Option B": "rate(cpu_usage[10m])",
    "Option C": "increase(cpu_usage[10m])",
    "Option D": "sum_over_time(cpu_usage[10m])",
    "Correct Answer": 1
  },
  {
    "Question": "How would you write a PromQL query to calculate the sum of the rate of increase for multiple counter metrics?",
    "Option A": "sum(rate(counter_metric[5m]))",
    "Option B": "rate(sum(counter_metric[5m]))",
    "Option C": "increase(sum(counter_metric[5m]))",
    "Option D": "sum_over_time(rate(counter_metric[5m]))",
    "Correct Answer": "A"
  },
  {
    "Question": "To find the minimum disk space used across all servers over the past hour, which query would be correct?",
    "Option A": "min_over_time(disk_space_used[1h])",
    "Option B": "sum(disk_space_used[1h])",
    "Option C": "avg(disk_space_used[1h])",
    "Option D": "min(disk_space_used)",
    "Correct Answer": 1
  },
  {
    "Question": "What does the sum_over_time() function do in PromQL?",
    "Option A": "Sums the values of the time series over a specified range",
    "Option B": "Sums the values of the time series at a single point in time",
    "Option C": "Sums the rates of the time series over a specified range",
    "Option D": "Sums the rates of the time series at a single point in time",
    "Correct Answer": 1
  },
  {
    "Question": "How would you calculate the 99th percentile latency of HTTP requests over the last 10 minutes?",
    "Option A": "quantile_over_time(0.99, http_request_duration_seconds[10m])",
    "Option B": "histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[10m]))",
    "Option C": "percentile_over_time(0.99, http_request_duration_seconds[10m])",
    "Option D": "quantile(0.99, http_request_duration_seconds[10m])",
    "Correct Answer": 2
  },
  {
    "Question": "To analyze the 95th percentile latency for HTTP requests using histogram data, which PromQL query would you use?",
    "Option A": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))",
    "Option B": "quantile_over_time(0.95, http_request_duration_seconds[5m])",
    "Option C": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
    "Option D": "percentile_over_time(0.95, http_request_duration_seconds[5m])",
    "Correct Answer": 1
  },
  {
    "Question": "How would you write a query to calculate the difference between the maximum and minimum memory usage for each pod over the past 15 minutes?",
    "Option A": "max_over_time(memory_usage[15m]) - min_over_time(memory_usage[15m])",
    "Option B": "max(memory_usage) - min(memory_usage)",
    "Option C": "increase(max(memory_usage[15m]) - min(memory_usage[15m]))",
    "Option D": "rate(max(memory_usage[15m]) - min(memory_usage[15m]))",
    "Correct Answer": 1
  },
  {
    "Question": "Which query would you use to find the top 3 nodes with the highest CPU usage over the past hour?",
    "Option A": "topk(3, max_over_time(node_cpu_usage[1h]))",
    "Option B": "topk(3, sum(rate(node_cpu_usage[1h])))",
    "Option C": "topk(3, avg_over_time(node_cpu_usage[1h]))",
    "Option D": "topk(3, increase(node_cpu_usage[1h]))",
    "Correct Answer": 1
  },
  {
    "Question": "How can you calculate the average number of active sessions per minute over the past day, assuming active_sessions is a gauge metric?",
    "Option A": "avg_over_time(active_sessions[1d]) / 1440",
    "Option B": "rate(active_sessions[1d]) / 1440",
    "Option C": "avg(active_sessions) / 1440",
    "Option D": "irate(active_sessions[1d]) / 1440",
    "Correct Answer": 2
  },
  {
    "Question": "Which of the following is the correct PromQL syntax for selecting data from the http_requests_total metric in the last 5 minutes?",
    "Option A": "http_requests_total[5m]",
    "Option B": "http_requests_total{5m}",
    "Option C": "http_requests_total(5m)",
    "Option D": "http_requests_total{5m}]",
    "Correct Answer": 1
  },
  {
    "Question": "How do you retrieve the average value of the cpu_usage metric over a 10-minute window?",
    "Option A": "avg(cpu_usage[10m])",
    "Option B": "cpu_usage_avg[10m]",
    "Option C": "cpu_usage / 10m",
    "Option D": "cpu_usage(avg)[10m]",
    "Correct Answer": 1
  },
  {
    "Question": "What is the correct syntax to filter data from the http_requests_total metric where the status code is 200?",
    "Option A": "http_requests_total{status=\"200\"}",
    "Option B": "http_requests_total(status=\"200\")",
    "Option C": "http_requests_total{status:200}",
    "Option D": "http_requests_total[status=\"200\"]",
    "Correct Answer": 1
  },
  {
    "Question": "Which of the following PromQL expressions is written with correct syntax to calculate the 90th percentile of the latency metric?",
    "Option A": "percentile(latency, 90)",
    "Option B": "latency{quantile=\"0.90\"}",
    "Option C": "quantile(0.90, latency)",
    "Option D": "latency[90%]",
    "Correct Answer": 1
  },
  {
    "Question": "How would you select the maximum value of the memory_usage metric over a 1-hour time range?",
    "Option A": "max(memory_usage) [1h]",
    "Option B": "memory_usage{1h} max",
    "Option C": "max(memory_usage) / 1h",
    "Option D": "memory_usage / max[1h]",
    "Correct Answer": 1
  },
  {
    "Question": "Which PromQL syntax retrieves the sum of disk_space_used across all instances?",
    "Option A": "sum(disk_space_used) by (instance)",
    "Option B": "disk_space_used{sum by instance}",
    "Option C": "sum(disk_space_used) without (instance)",
    "Option D": "disk_space_used{sum(instance)}",
    "Correct Answer": 1
  },
  {
    "Question": "How do you correctly select data from the network_packets_received metric where the device is named \"eth0\"?",
    "Option A": "network_packets_received{device=\"eth0\"}",
    "Option B": "network_packets_received(device=\"eth0\")",
    "Option C": "network_packets_received{device:\"eth0\"}",
    "Option D": "network_packets_received[device=\"eth0\"]",
    "Correct Answer": 1
  },
  {
    "Question": "Which PromQL expression correctly filters data from the http_requests_total metric where the method is \"POST\" and the status is 500?",
    "Option A": "http_requests_total{method=\"POST\", status=\"500\"}",
    "Option B": "http_requests_total{method:\"POST\", status:\"500\"}",
    "Option C": "http_requests_total(method=\"POST\", status=\"500\")",
    "Option D": "http_requests_total[method=\"POST\"][status=\"500\"]",
    "Correct Answer": 1
  },
  {
    "Question": "What is the correct syntax to retrieve the minimum value of the response_time metric over a 30-minute time range?",
    "Option A": "min(response_time) [30m]",
    "Option B": "response_time[min(30m)]",
    "Option C": "min(response_time) / 30m",
    "Option D": "response_time / min[30m]",
    "Correct Answer": 1
  },
  {
    "Question": "Which of the following PromQL expressions correctly selects data from the disk_usage metric where the mount point is \"/var\"?",
    "Option A": "disk_usage{mountpoint=\"/var\"}",
    "Option B": "disk_usage[mountpoint=\"/var\"]",
    "Option C": "disk_usage(mountpoint=\"var\")",
    "Option D": "disk_usage[\"/var\"]",
    "Correct Answer": 1
  },
  {
    "Question": "How would you calculate the rate of change of the requests_total metric over a 5-minute interval?",
    "Option A": "increase(requests_total)[5m]",
    "Option B": "rate(requests_total)[5m]",
    "Option C": "increase(rate(requests_total))[5m]",
    "Option D": "rate(increase(requests_total))[5m]",
    "Correct Answer": 2
  },
  {
    "Question": "What is the correct PromQL syntax to compute the difference in disk_space_used over the last 10 minutes?",
    "Option A": "delta(disk_space_used)[10m]",
    "Option B": "diff(disk_space_used)[10m]",
    "Option C": "increase(disk_space_used)[10m]",
    "Option D": "rate(disk_space_used)[10m]",
    "Correct Answer": 1
  },
  {
    "Question": "How do you find the percentage increase in the transactions metric over the last hour?",
    "Option A": "increase(transactions) * 100 / transactions",
    "Option B": "(transactions - increase(transactions)) / increase(transactions) * 100",
    "Option C": "100 * increase(transactions) / transactions",
    "Option D": "transactions / increase(transactions) * 100",
    "Correct Answer": 3
  },
  {
    "Question": "Which of the following PromQL expressions calculates the second derivative of the cpu_usage metric over a 5-minute period?",
    "Option A": "rate(rate(cpu_usage)[5m])[5m]",
    "Option B": "increase(increase(cpu_usage)[5m])[5m]",
    "Option C": "derivative(derivative(cpu_usage)[5m])[5m]",
    "Option D": "increase(derivative(cpu_usage)[5m])[5m]",
    "Correct Answer": 3
  },
  {
    "Question": "How do you calculate the ratio of success to failure in the http_requests metric?",
    "Option A": "success / failure",
    "Option B": "success(failure)",
    "Option C": "success / count(failure)",
    "Option D": "success / sum(failure)",
    "Correct Answer": 3
  },
  {
    "Question": "Which PromQL expression calculates the difference between the maximum and minimum values of the memory_usage metric over the last 30 minutes?",
    "Option A": "max(memory_usage) - min(memory_usage)[30m]",
    "Option B": "delta(memory_usage)[30m]",
    "Option C": "range_max(memory_usage) - range_min(memory_usage)[30m]",
    "Option D": "increase(max(memory_usage) - min(memory_usage))[30m]",
    "Correct Answer": 1
  },
  {
    "Question": "How do you compute the moving average of the temperature metric over a 15-minute window?",
    "Option A": "avg_over_time(temperature[15m])",
    "Option B": "moving_avg(temperature, 15m)",
    "Option C": "increase(avg(temperature))[15m]",
    "Option D": "rate(avg(temperature))[15m]",
    "Correct Answer": 1
  },
  {
    "Question": "What is the correct PromQL syntax to find the median of the response_time metric over the last hour?",
    "Option A": "median_over_time(response_time[1h])",
    "Option B": "quantile(0.5, response_time)[1h]",
    "Option C": "median(response_time)[1h]",
    "Option D": "percentile(response_time, 50)[1h]",
    "Correct Answer": 2
  },
  {
    "Question": "Which of the following PromQL expressions calculates the per-second rate of increase of the network_traffic metric over a 10-minute window?",
    "Option A": "rate(increase(network_traffic)[10m])",
    "Option B": "increase(rate(network_traffic))[10m]",
    "Option C": "increase(network_traffic) / 10m",
    "Option D": "rate(network_traffic) / 10m",
    "Correct Answer": 1
  },
  {
    "Question": "How would you compute the standard deviation of the latency metric over the last 5 minutes?",
    "Option A": "stddev(latency)[5m]",
    "Option B": "quantile(0.5, latency)[5m]",
    "Option C": "delta(latency)[5m]",
    "Option D": "stdev(latency)[5m]",
    "Correct Answer": 1
  },
  {
    "Question": "Which PromQL function is used to calculate the increase of a counter metric over time?",
    "Option A": "increase()",
    "Option B": "rate()",
    "Option C": "delta()",
    "Option D": "difference()",
    "Correct Answer": 1
  },
  {
    "Question": "How do you calculate the sum of the http_requests_total metric grouped by the status label?",
    "Option A": "sum(http_requests_total) by (status)",
    "Option B": "sum(http_requests_total) group by status",
    "Option C": "sum(http_requests_total) without (status)",
    "Option D": "sum(http_requests_total) on (status)",
    "Correct Answer": 1
  },
  {
    "Question": "Which PromQL function is used to compute the moving average of a metric over time?",
    "Option A": "moving_avg()",
    "Option B": "avg_over_time()",
    "Option C": "rate()",
    "Option D": "increase()",
    "Correct Answer": 2
  },
  {
    "Question": "How would you calculate the rate of change of the errors metric over a 5-minute interval, accounting for resets to zero?",
    "Option A": "irate(errors[5m])",
    "Option B": "increase(errors[5m])",
    "Option C": "rate(errors[5m])",
    "Option D": "delta(errors[5m])",
    "Correct Answer": 1
  },
  {
    "Question": "Which function is used to find the lowest value of a metric over a specified time range?",
    "Option A": "min_over_time()",
    "Option B": "lowest()",
    "Option C": "min()",
    "Option D": "minimum()",
    "Correct Answer": 1
  },
  {
    "Question": "How do you calculate the sum of the disk_space_used metric over a 10-minute window for each instance?",
    "Option A": "sum by (instance)(disk_space_used)[10m]",
    "Option B": "sum(disk_space_used) group by instance[10m]",
    "Option C": "sum(disk_space_used) by (instance)[10m]",
    "Option D": "sum(disk_space_used) without (instance)[10m]",
    "Correct Answer": 1
  },
  {
    "Question": "Which function is used to compute the range of values for a metric over a specified time range?",
    "Option A": "range_over_time()",
    "Option B": "metric_range()",
    "Option C": "range()",
    "Option D": "value_range()",
    "Correct Answer": 1
  },
  {
    "Question": "How would you calculate the sum of the memory_usage metric over the last 30 minutes, taking into account only samples where the value is greater than 1000?",
    "Option A": "sum_over_time(memory_usage > 1000)[30m]",
    "Option B": "sum(memory_usage) > 1000[30m]",
    "Option C": "sum(memory_usage{memory_usage > 1000})[30m]",
    "Option D": "sum(memory_usage > 1000)[30m]",
    "Correct Answer": 1
  },
  {
    "Question": "Which PromQL function is used to compute the absolute difference between the maximum and minimum values of a metric over a specified time range?",
    "Option A": "range_abs()",
    "Option B": "abs_range()",
    "Option C": "difference()",
    "Option D": "delta_abs()",
    "Correct Answer": 1
  },
  {
    "Question": "How do you calculate the average of the response_time metric over a 15-minute window, ignoring any samples where the value is zero?",
    "Option A": "avg_over_time(response_time != 0)[15m]",
    "Option B": "avg(response_time) unless response_time == 0[15m]",
    "Option C": "avg(response_time) unless response_time = 0[15m]",
    "Option D": "avg(response_time != 0)[15m]",
    "Correct Answer": 1
  },
  {
    "Question": "What is the correct PromQL expression to calculate the rate of increase of the http_requests_total metric over the last 10 minutes, filtering for the status code 200?",
    "Option A": "increase(http_requests_total{status=\"200\"})[10m]",
    "Option B": "rate(http_requests_total{status=\"200\"})[10m]",
    "Option C": "increase(rate(http_requests_total{status=\"200\"}))[10m]",
    "Option D": "rate(increase(http_requests_total{status=\"200\"}))[10m]",
    "Correct Answer": 1
  },
  {
    "Question": "How would you find the 90th percentile of the latency metric over the last hour, accounting for resets to zero?",
    "Option A": "irate(quantile(0.90, latency)[1h])",
    "Option B": "quantile(0.90, irate(latency)[1h])",
    "Option C": "irate(quantile(0.90, latency))[1h]",
    "Option D": "quantile(0.90, irate(latency))[1h]",
    "Correct Answer": 2
  },
  {
    "Question": "What is the correct PromQL expression to compute the moving average of the temperature metric over the last 15 minutes, filtering out any instances where the value is negative?",
    "Option A": "avg_over_time(temperature > 0)[15m]",
    "Option B": "avg(temperature) unless temperature < 0[15m]",
    "Option C": "avg(temperature) unless temperature = 0[15m]",
    "Option D": "avg(temperature > 0)[15m]",
    "Correct Answer": 1
  },
  {
    "Question": "How do you calculate the rate of change of the disk_io metric over the last 5 minutes, excluding any samples where the value is less than 10?",
    "Option A": "irate(disk_io > 10)[5m]",
    "Option B": "irate(disk_io) > 10[5m]",
    "Option C": "irate(disk_io{disk_io > 10})[5m]",
    "Option D": "irate(disk_io > 10)[5m]",
    "Correct Answer": 3
  },
  {
    "Question": "Which PromQL expression correctly calculates the ratio of successful_requests to total_requests over a 10-minute interval, excluding any samples where total_requests is zero?",
    "Option A": "successful_requests / total_requests > 0 [10m]",
    "Option B": "rate(successful_requests) / rate(total_requests) unless total_requests == 0 [10m]",
    "Option C": "increase(successful_requests) / increase(total_requests) unless total_requests == 0 [10m]",
    "Option D": "successful_requests / total_requests unless total_requests == 0 [10m]",
    "Correct Answer": 3
  },
  {
    "Question": "How would you find the maximum value of the cpu_temperature metric over the last 30 minutes, taking into account only samples where the device label is \"cpu1\"?",
    "Option A": "max_over_time(cpu_temperature{device=\"cpu1\"})[30m]",
    "Option B": "max(cpu_temperature{device=\"cpu1\"})[30m]",
    "Option C": "max(cpu_temperature{device=\"cpu1\"}[30m])",
    "Option D": "max_over_time(cpu_temperature{device=\"cpu1\"}[30m])",
    "Correct Answer": 1
  },
  {
    "Question": "What is the correct PromQL expression to calculate the 95th percentile of the response_time metric over the last 1 hour, excluding any samples where response_time is greater than 500 milliseconds?",
    "Option A": "quantile(0.95, response_time < 500)[1h]",
    "Option B": "quantile(0.95, response_time) unless response_time > 500 [1h]",
    "Option C": "quantile(0.95, response_time) > 500 [1h]",
    "Option D": "quantile(0.95, response_time) unless response_time > 500ms [1h]",
    "Correct Answer": 2
  },
  {
    "Question": "How do you compute the moving average of the network_throughput metric over the last 15 minutes, considering only samples where the value is above 1000?",
    "Option A": "avg_over_time(network_throughput > 1000)[15m]",
    "Option B": "avg(network_throughput) unless network_throughput <= 1000 [15m]",
    "Option C": "avg(network_throughput) unless network_throughput <= 1000 [15m]",
    "Option D": "avg_over_time(network_throughput > 1000)[15m]",
    "Correct Answer": 1
  },
  {
    "Question": "What is the correct PromQL expression to find the sum of disk_io_bytes for each instance over the last 5 minutes, excluding any instances where the sum is less than 1000 bytes?",
    "Option A": "sum by (instance)(disk_io_bytes > 1000)[5m]",
    "Option B": "sum(disk_io_bytes{disk_io_bytes > 1000}) by (instance)[5m]",
    "Option C": "sum(disk_io_bytes) unless sum(disk_io_bytes) <= 1000 [5m]",
    "Option D": "sum by (instance)(disk_io_bytes) unless sum(disk_io_bytes) <= 1000 [5m]",
    "Correct Answer": 1
  },
  {
    "Question": "How would you calculate the rate of change of the temperature metric over the last 10 minutes, excluding any samples where the value is less than 20?",
    "Option A": "irate(temperature > 20)[10m]",
    "Option B": "irate(temperature) > 20 [10m]",
    "Option C": "irate(temperature{temperature > 20})[10m]",
    "Option D": "irate(temperature > 20)[10m]",
    "Correct Answer": 3
  },
  {
    "Question": "What is the correct metric name for the query 'sum(rate(apiserver_flowcontrol_rejected_requests_total{}[5m])) by (flowSchema,reason) > 0'?",
    "Option A": "flowControlRejectedRequest",
    "Option B": "API99thReadRequestLatency",
    "Option C": "APIInflightRequests",
    "Option D": "flowControl99thRequestWait",
    "Correct Answer": 1
  },
  {
    "Question": "What query is used to find the 99th percentile request wait duration in flow control?",
    "Option A": "sum(irate(apiserver_request_total{}[2m])) by (verb",
    "Option B": "resource",
    "Option C": "subresource",
    "Option D": "apiserver",
    "Correct Answer": "component"
  },
  {
    "Question": "Which query is used to determine the API inflight requests?",
    "Option A": "sum(apiserver_current_inflight_requests{}) by (request_kind) > 0",
    "Option B": "histogram_quantile(0.99",
    "Option C": "sum(rate(apiserver_flowcontrol_request_execution_seconds_bucket{}[5m])) by (le",
    "Option D": "flow_schema",
    "Correct Answer": "priority_level)) > 0"
  },
  {
    "Question": "What metric name is used for the query 'sum(rate(apiserver_flowcontrol_dispatched_requests_total[2m])) by (flow_schema,priority_level) > 0'?",
    "Option A": "APIRequestRate",
    "Option B": "flowControlRejectedRequest",
    "Option C": "flowControlRate",
    "Option D": "flowControl99thRequestExecution",
    "Correct Answer": 3
  },
  {
    "Question": "Which query determines the 99th percentile of request execution time in flow control?",
    "Option A": "sum(rate(apiserver_request_duration_seconds_bucket{verb=~\"\"POST|PUT|PATCH|DELETE\"",
    "Option B": "subresource!=\"\"log\"\"}[2m])) by (verb",
    "Option C": "resource",
    "Option D": "subresource",
    "Correct Answer": "component"
  },
  {
    "Question": "Which of the following PromQL queries correctly calculates the rate of HTTP requests per job over the last 5 minutes?",
    "Option A": "sum by (job) (rate(http_requests_total[5m]))",
    "Option B": "rate(http_requests_total[5m]) by (job)",
    "Option C": "rate(sum by (job) (http_requests_total[5m]))",
    "Option D": "rate(http_requests_total{job}[5m])",
    "Correct Answer": 1
  }
]